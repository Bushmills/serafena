# executed (sourced) before service welcome is executed.
# contain host specific custom action, execute when the host joins serafena

testament()  {
   signal @servicebroker testament $HOSTNAME $@
}

sl()  {
   signal $HOSTNAME $@ 
}

# providing <service>      # return/exit value 0 if service provided. 1 otherwise
providing()  {
   read state _ <<< $(sl service state $1)
   return $((! state))
}

# join group on host/@group        add localhost to group on host/@group, and deposit a testament for removal from group upon disconnect
join()  {
   signal $3 group $1 + $HOSTNAME
   testament signal $3 group $1 - $HOSTNAME
}

# ----------------------------------------------------------------------------------------------------------

# @TODO add an event filter, by registering for specified events only. 
providing event && join event on @all

# ----------------------------------------------------------------------------------------------------------

# work in progress:
# --- power (functional but too complex)---
# consider group join actions, where stuff like this could be moved to. a sourceable .join script in group directory may be nice.
# probably want a .part script as well.
# may want to consider to put this into a fragment, sourced if needed
# subgroups may be nice too. allow copying of not just a group, but with all related groups in one single operation.

sl group power = $(signal @others group power)			# ask other hosts to tell us who knows how to power
sl group power = $(signal :power group power)			# 2nd opinion: ask power brokers to verify
# missing    signal host group name from @group
#            signal host group name from :group


type -t sispmctl > /dev/null && {				# can we power? without sispmctr for power strip access we can't, even with power strip connected
#  sl package install sispmctl					# with a package service, the needed package could be installed.
   energenie="04b4:fd13"					# USB id of EnerGenie programmable power strips
   lsusb -d $energenie > /dev/null && {				# we also need a power strip connected.

# --------- I have a power strip and the means to control it ----------

      providing power || {					# service power active?
         sl service install power				# no: install, enable
         sl service enable power
      }

# --------- I have a power strip, the means to control it and can provide services ----------

      signal @power power mac |					# ask other power hosts for macs of their power strips
      while read mac host _; do
         sl group power_$mac = $host				# add those as power_mac groups locally
      done

      join power on @all					# tell all that I know how to power, who else knows to, and who can power what.

      sl power mac |
      while read mac _ ; do					
         join power_$mac on @power				# tell all in power group (including myself) that power_$mac strip is mine.
      done

# ---- "I have a wizard, and I know how to use it" (c) T.P. (R.I.P) ----

   }
}

# host may want to perform some additional configuration.
# I want my hosts which provide service status to become member of the munin group on host odroid.
[[ -f /etc/serafena.welcome.local ]] &&
source /etc/serafena.welcome.local
