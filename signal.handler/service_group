# named groups of hosts
# @HELP signal host group				# show members of all groups
# @HELP signal host group name				# show members of specified group 
# @HELP signal host group name =			# delete group
# @HELP signal host group name = host1 host2 host3 ...	# assign member(s) to group
# @HELP signal host group name + host1 host2 host3 ...	# add member(s) to group
# @HELP signal host group name - host1 host2 host3	# remove member(s) from group.
# @HELP signal host group name member host		# is host member of group?
# @HELP signal host group name from host		# read group from remote host, set local identically
# @HELP signal host group name to host			# copy local group to remote host
# @HELP signal host group name to @group		# copy local group to remote group
# @HELP signal host group name dead			# diagnostic on group members: report hosts which aren't responding to pings

# changed to subcommand dispatch away from that nested conditionals
# structure, in preparation for centralised group administration with local
# caching

listgroups()  {						# assumes that pwd is $groups. If not sure, cd $groups first
   for d in *; do   
      [[ -d $d ]] && rmdir --ignore-fail-on-non-empty $d
      [[ -d $d ]] && printf '%-20s %s' "$d" "$(source $fragments/members $d)" &&
      echo						# 
   done
}

group_()  {
   source $fragments/members $group			# signal host group foo
}

group_+()  {
   [[ -z $args ]] ||
   touch $args						# signal host group foo +
}

group_-()  {
   [[ -z $args ]] ||
   rm -f $args						# signal host group foo -
}

# @TODO this membership test will fail with pretend groups and needs fixing
# @TODO organise functions such that those below require non-empty groups.
# @TODO as such, they need to query members. Because all following functions do,
# @TODO just calling member functions once here is enough for all functions.
group_member()  {
   [[ ! -f $args ]]
   echo $?						# signal host group name member name
}

group_from()  {
   [[ -z $args ]] || rm -f *
   h="$(signal ${args%% *} group $group)"
   [[ -z $h ]] || touch $h
}

group_to()  {
   [[ -z $args ]] ||
   signal ${args%% *} group $group = $(source $fragments/members $group)
}

group_dead()  {
   hosts=$(source $fragments/members $group)
   [[ -z $hosts ]] && source $fragments/fatal "no such group $group"
   fping -u -r1 $hosts 2>&1 | sed 's/ .*//'
}

group_unknown()  {
   source $fragments/fatal "can't $group $cmd"
}

group="${1//[!a-z0-9:._-]/_}"				# rigorously substitute illegal chars against underscores
cmd="${2//[!a-z+=-]/_}"
shift 2
args=$(eval echo "$@")					# eval'ed for substitution and expansion
args="${args//[!a-z0-9 @._-]/_}"			# sanitising the expanded value

mkdir -p $groups/$group &&
cd $groups/$group &&
if [[ -z "$group" ]]; then
   listgroups						# signal host group
else
# @TODO some functions should throw an error if group is nonexistent or empty
   if [[ "$cmd" == "=" ]]; then		# signal host group foo =
      rm -f *
      [[ -z $args ]] || touch $args
   else
      type -t group_$cmd > /dev/null || cmd="unknown"
      group_$cmd $args
   fi
fi
true
