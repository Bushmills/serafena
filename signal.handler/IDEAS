---------------------------------------------------------------------------------------------------------------------------

make "system" services, the set every host must provide, part of the xinetd server, "dispatch" as it is called now. eventually
it is likely to be renamed to "serafena"

---------------------------------------------------------------------------------------------------------------------------

permit requestes only if they originate from a member of group @all

---------------------------------------------------------------------------------------------------------------------------

ad-hoc services

marked in such a way that a host, upon discovering that it doesn't provide a service with a name of an ad-hoc service,
installs it from pool, executes the service handler, and uninstalls the service on completion again.

Not really sure what this could be good for. It may help uncluttering the list of services, insure that the most recent
( = pool) version is used, and of course increase latency for execution of an ad-hoc service.

---------------------------------------------------------------------------------------------------------------------------

add a service to servicebroker which signals to @all to create a group by the name of a specified service, with all hosts
listening to that service as members.

So instead of broadcasting a service request to @all, even to those hosts which don't offer that service, servicebroker is
instructed to take care of creating the group which then can be addresses as recipients of that service.

---------------------------------------------------------------------------------------------------------------------------

should a host run low of entropy, fill up its pool by random from another host whose entropy pool is then reduced.
status (for munin) already produces the amount of entropy available, so it should be easy to take some from a host which
has plenty and doesn't need it.

---------------------------------------------------------------------------------------------------------------------------

current implementation assumes that any host can reach any other host - this may not be a valid assumption.
Consider to implement some via mechanism. Essentially, allow a host to query "who can reach host", then have requests
generally proxied by one of those able to.

---------------------------------------------------------------------------------------------------------------------------

service_packages - interface to package managers, hiding their differences.
facettes update install remove clean list installed available

---------------------------------------------------------------------------------------------------------------------------

provided a wildcard mechanism for install, update, for selection of platform specific services.
those may come in different variants, selected by machine characteristics.
Examples:

bash, sh, python, perl ... preferred script language
aptitude, apt, yum, pacman etc package managers
host cpu type
(host operating system)

consider:
  pool service handler is a file: no wildcards
                       is a directory:  wildcards as files in directory.



service_packagemanager/apt
service_packagemanager/aptitude
service_packagemanager/yum

specify:
    prefer=apt       
    service packagemanager%$prefer
>   service packagemanager:$prefer
    service packagemanager_$prefer
