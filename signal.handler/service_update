# update local service handlers from pool.
# @HELP signal host update
# @HELP signal host update force
# @HELP signal host update pretend

stamp=0
now="$(date +%s)"
last="$tmp/last_update"					# instead of writing stamp to file, consider using file date
[[ $1 != "pretend" ]]; pretend="$?"			# flag pretend to avoid actually changing anything
[[ -f "$last" && $1 != "force" ]] && read stamp < $last	# when did last update take place
signal @pool pool updated $stamp |
while read service stamp host state description; do
   f="$p/service_$service"
   [[ -f "$f" ]] && {					# an updated service exist locally
      ((state)) && {					# for now, updateable pool services must be executable.
         ((pretend)) || {				# This supercedes the earlier exception list.
# @TODO postpone requests to that service during update.
#           touch ${semaphore}_prevent_${service}
# @TODO updates should consider changed @FACETTEs, and reflect those in the services directory
            signal @pool pool cat "$service" > "$f"	# install updated pool version
#           rm ${semaphore}_prevent_${service}
            touch -d @$stamp "$f"			# set stamp identical to pool date
         }
         echo "$HOSTNAME updated $service, stamped $stamp"
      }
   }
done

((pretend)) ||
echo $now > $last					# remember when last (this) update was done
