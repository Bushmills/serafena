# update local service handlers from pool.
# signal host update
# signal host update force
# signal host update pretend

last="$tmp/last_update"					# instead of writing stamp to file, consider using file date

stamp=0
[[ -f "$last" && $1 != "force" ]] && read stamp < $last
[[ $1 != "pretend" ]]; pretend="$?"

# don't have info who serves as pool? find out.
[[ -z $pool ]] && source $fragments/pool

now="$(date +%s)"
signal $pool pool updated $stamp |
while read service stamp description; do
   f="$p/service_$service"
   [[ -f $f ]] && {						# updated version of locally installed service
      [[ $service == "update" || $service == "pool" ]] || {	# exclude these two - they are both used for update, can't update themselves
								# could think of workaround, different method to transfer either of these.
         echo "$HOSTNAME: updating $service"
         ((pretend)) || {
# @TODO postponing execution of service handler while rewriting would be advisable here.
            signal "$pool" pool cat "$service" > "$f"		# get updated pool version
            touch -d @"$stamp" "$f"				# stamp identical to pool date
         }
      }
   }
done

((pretend)) ||
echo "$now" > "$last"					# remember when last (this) update was done
