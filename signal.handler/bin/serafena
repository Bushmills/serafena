#!/bin/bash
# version: 0.0.1
# @INFO information about serafena support scripts


xinetd="/etc/xinetd.d"
config="$xinetd/signal"						# serafena's xinetd configuration file
p="$xinetd/signal.handler"					# path to server, service handlers
pool="/misc/buffalo$p/pool"					# path to service repository 
local="/usr/local/lib/serafena"					# where stuff like vars, groups, inventory, testaments etc is kept
git="/home/l/serafena"
read port <<< $(awk '$1 == "port" { print $3 }' $config)	# extract port number from xinetd config file

serafena_install() { # unfinished installer.  deploy does a lot of this already
   host="$1"
   shift
   [[ -z $host ]] || {
      host=($(signal $host group pool))
      [[ -z $host ]] ||
      echo "installing from $host"
   }
}

copy()  {
   printf "%-12s %s\n" "$h:" "${1##*/}"
   rsync -a "$1" "$2"
}

serafena_dispatch()  { # update dispatch from pool to host(s)
   for h in $hosts; do
      copy $pool/dispatch $h:$p
   done
}

serafena_groups()  { # install pretend groups on host(s)
   for h in $hosts; do
      copy $pool/groups $h:$local/
   done
}

serafena_welcome()  { # update /etc/serafena.welcome from pool to host(s)
   for h in $hosts; do
      copy $pool/serafena.welcome.conf $h:/etc
   done
}

serafena_fragments()  { # update fragments from pool to host(s)
   for h in $hosts; do
      copy $pool/fragments $h:$p
   done
}


serafena_nas()  { # create a NAS archive from installed handler + pool, keep last 25 versions only
   backup="/misc/nas/backup/serafena"
   mkdir -p $backup && 
   cd $backup && 
   tar czf serafena.$(date +%s).tgz $pool $git &&
   rm -f $(printf '%s\n' * | sort -r | sed 1,25d)    		# keep only the most recent 10 versions
   ls -l
}

serafena_git()  { # commit changed serafena files, push to git repository
   git="/home/l/serafena"
   servicehandler="$git/signal.handler"
   fragments="$servicehandler/fragments"
   etc="$git/etc"
   bin="$servicehandler/bin"
   groups="$servicehandler/groups"

files()  {
# --------------------------------------------------------------------------------------------
#  source dir                    dest dir               files list
cat << EOF
/usr/local/bin			$bin			serafena
$pool/bin			$bin			*
$pool				$servicehandler		service_* dispatch serafena.welcome README TODO IDEAS
$pool				$etc			serafena.*.conf serafena.*.local
$pool/fragments			$fragments		*
EOF
# groups are files in subdirectories of subdirectory, can't catch them with wildcards above.
for f in $pool/groups/*/.pretend; do
   src="${f%/*}"
   dest="$groups/${src##*/}"
   echo "$src   $dest  .pretend"
done

# --------------------------------------------------------------------------------------------
}
   files |
   while read source dest f; do
      echo "cd $source"
      cd $source &&
      for file in $f; do
         echo "   cp -u $file $dest"
         mkdir -p $dest
         cp -u $file $dest
      done
   done

   cd $git
   git add .
#   git add $fragments/*
#   git add $servicehandler/*
#   git add $bin/*
#   git add $groups
   git commit
   git push
}



# deploy					# update dispatch, signal (from pool) and service_update (from local) to all hosts
# deploy host					# install on host
# deploy host1 host2 host3			# install on hosts

# @INFO copy signal, dispatch, selected service handlers, fragments, pretend groups to host(s), restart xinetd
# @TODO not aware of facettes when installing service handlers
serafena_deploy()  { # copy server, restart xinetd, install and enable service on hosts
   files="dispatch service_update service_service service_group service_signal fragments"
   for h in $hosts; do
      printf " $h: \t%s\r" "$h: syncing files"
      copy ${pool}/signal   $h:/etc/xinetd.d/
      for f in $files; do
         [[ -f $f ]] && {
            grep -q "^# @FACETTE" $f &&
            echo "$f needs facettes which aren't yet supported by this script"
         }
         copy ${pool}/$f    $h:$p/
      done
      copy ${pool}/groups   $h:$local/
      printf " $h: \t%s                            \n"  "xinetd restarting"
      ssh $h "/etc/init.d/xinetd restart > /dev/null; chmod +x /etc/xinetd.d/signal.handler/service_update"
      signal $h group all + $h $HOSTNAME	# make sure group @all isn't empty. also helps finding a servicebroker
      signal @servicebroker group all to $h	# workaround for chicken-and-egg problem with new hosts
   done
}



serafena_update()  { # update service_update from odroid to all hosts, without using the "update" service
   read stamp service host state description < <(signal odroid service stamp update)
   ((stamp)) && {
      f="$p/service_update"
      signal @pool x 'cp $p/pool/service_pool $p; chmod +x $p/service_pool'		
      signal @all x "signal @pool pool cat update > $f; chmod +x $f; touch -d @$stamp $f"	# transfer pool version of update to every host in @all group
      signal @all service stamp update							        # show installed versions
   }
}


serafena_fix()  { # get localhost running again, after a broken version was installed
   cp $pool/dispatch $p
   cp $pool/service_group $p
   hosts=$HOSTNAME
   serafena_deploy 
   sl update 

   [[ $1 == all ]] && {
      hosts=$(sl group others)
      serafena_deploy 
      signal @others update
   }
}


recommended()  {
   echo "recommeded action:  serafena $1"
}

serafena_help()  { # show this help
   sed -n 's/^serafena_//p' $0 |
   while read fn descr; do
      printf '%-10s %s\n' "${fn%%()*}:" "${descr#*{*#}"
   done
# examine system, determine what action is recommended
   while read src dest file action _; do
      [[ -f $src/$file ]] &&
         [[ $dest/$file -ot $src/$file ]] &&
         recommended $action
      [[ -d $src/$file ]] && {
         update=0
         for f in $src/$file/*; do
            [[ $dest/$file/${f##*/} -ot $f ]] && update=1
         done
         ((update)) && recommended $action
      }
   done << EOF
	$pool				$p				dispatch		dispatch
	$pool				/etc				serafena.welcome	welcome
        $pool				$p				fragments		fragments
EOF
# directories handling above can only deal with files in subdirectories, not with
# subdirectories with files in subdirectories, as is the case with pretend groups.
   for f in $pool/groups/*/.pretend; do
      [[ "$local${f#$pool}" -ot "$f" ]] && recommended groups
   done
}





cmd="${1:-help}"
shift
hosts="${@:-$(sl group all)}"
type -t serafena_$cmd > /dev/null || cmd=help
 serafena_$cmd $@
