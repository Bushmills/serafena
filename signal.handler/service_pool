# keep an up to date pool of services, allow hosts to pull services from
# @HELP signal <host> pool
# @HELP signal <host> pool cat service
# @HELP signal <host> pool updated stamp
# @HELP signal <host> pool installer
# @HELP signal <host> pool installer host
# @HELP consider to add a specific purpose command for updating service_update from pool.

pool_updated() {
   want="$1"
   stat -c"%Y %n" $pool/service_* |
   while read stamp f; do
      read description < $f					# 1st line of service handler
      description="${description#\#}"				# strip leading "# "
      ((stamp >= want)) && {
         [[ -x $f ]]						       # state
         printf '%-14s %d %-10s %d %s'  "${f#$pool/service_}" "$stamp" "pool" "$(($?^1))" "${description## }"
         echo
      }
   done | sort -nk2,2						# output modelled after "signal host service list"
}

pool_()        { pool_updated 0; }

pool_cat()     {
   service="$1"
   f="$pool/service_$service"
   [[ -f $f ]] &&
   cat $f ||
   source $fragments/error "can't $cmd service $service: not found"
}


# @HELP signal :pool installer host
# @HELP signal :pool installer host1 host2 host3
# @FACETTE installer
pool_installer()  {
   if [[ -z $1 ]]; then
      source $fragments/installer_instructions
   else
      source $fragments/installer $@
   fi
}



pool="$p/pool"
if type -t pool_$service > /dev/null; then			# facettes
   pool_$service $@
else								# subcommands
   cmd="$1"
   shift
   if type -t pool_$cmd > /dev/null; then
      pool_$cmd $@
   else
      source $fragments/error "can't $cmd service $service: doesn't exist"
   fi
fi
true
