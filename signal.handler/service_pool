# keep an up to date pool of services, allow hosts to pull services from
# @HELP signal <host> pool
# @HELP signal <host> pool cat service
# @HELP signal <host> pool updated stamp
# @HELP signal <host> pool installer
# @HELP signal <host> pool installer host
# @HELP consider to add a specific purpose command for updating service_update from pool.


pool_updated() {
   want="$1"
   stat -c"%Y %n" $p/service_* |
   while read stamp f; do
      service="${f#$p/service_}"				# /path/service_name -> name
      read description < $f					# 1st line of service handler
      description="${description#\#}"				# strip leading "# "
      ((stamp < want)) ||
      printf '%-14s %d %-12s %s\n' "${f##*/service_}" "$stamp" "pool" "${description## }"
   done | sort -nk2,2						# output modelled after "signal host service list"
}

pool_()        { pool_updated 0; }

pool_cat()     {
   service="$1"
   f="$p/service_$service"
   [[ -f $f ]] &&
   cat $f ||
   error "can't $cmd service $service: not found"
}

pool_installer()  {
   if [[ $1 == "run" ]]; then
      source $fragments/installer_script
   else
      source $fragments/installer_instructions
   fi
}

cmd="$1"
shift
if type -t pool_$cmd > /dev/null; then
   p="/etc/xinetd.d/signal.handler/pool"
   pool_$cmd $@
else
   error "can't $cmd service $service: doesn't exist"
fi
true
