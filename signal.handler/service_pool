# keep an up to date pool of services, allow hosts to pull services from
# @HELP signal <host> pool
# @HELP signal <host> pool cat service
# @HELP signal <host> pool updated stamp
# @HELP signal <host> pool installer
# @HELP signal <host> pool installer host

pool_updated() {
   want="$1"
   for f in $p/service_*; do
      description="$(sed -n 's/.*://;1p' $f)"
      stamp="$(stat -c%Y $f)"
      ((stamp < want)) || 
      printf '%-14s %d %s\n' "${f##*/service_}" "$stamp" "${description## }"
   done | sort -nk2,2
}

pool_()        { pool_updated 0; }

pool_cat()     {
   service="$1"
   f="$p/service_$service"
   [[ -f $f ]] &&
   cat $f ||
   error "service $service unknown on pool $pool"
}

pool_installer()  {
   if [[ $1 == "package" ]]; then

cat << EOF
echo "### Installing serafena to localhost ###"
echo "Downloading installation package"
echo "Unpacking configuration file"
echo "Creating base directories"
echo "Extracting serafena server"
echo "Extracting serafena code fragments"
echo "Extracting essential service handlers"
echo "Generating xinetd component configuration file"
echo "Restarting xinetd";                                  /etc/init.d/xinetd restart
echo "installation complete"
EOF

   else
cat << EOF
package and transfer an installer archive,
consisting of an install script, and all
files for a basic serafena host.
The installer script will put all files into
place and configure serafena for that host.

for bootstrap, the commandline to start installation
will be printed, for copy and paste execution.

This may look like:

bash < <(nc $pool $port <<< "pool installer package")

EOF
   fi
}



service="$1"
shift
if type -t pool_$service > /dev/null; then
   p="/etc/xinetd.d/signal.handler/pool"
   pool_$service $@
else
   error "command $service unknown with service pool"
fi
true
